from locust import HttpUser, task, between
import random
import uuid
from datetime import datetime

class TaskEventUser(HttpUser):
    wait_time = between(1, 3)  # simulate user "think time" between requests

    
    # ⬇️ Google Cloud Function Setup Below for on_start()
    # def on_start(self):
    #    self.endpoint = "/notify_task_event"  # this is ignored when using full URL in host
    
    # ⬇️ FastAPI setup for on_start() is below
    def on_start(self):
        """Authenticate and store access token"""
        self.task_ids = []  # Track created tasks for update/delete
        response = self.client.post(
            url="/api/v1/login/access-token",
            data={
                "username": "bakan@sabanciuniv.edu",
                "password": "berke1234"
            },
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            name="Login"
        )

        if response.status_code != 200:
            print(f"❌ Login failed! Status: {response.status_code} | Body: {response.text}")
            self.token = None
            self.headers = {}
            return

        try:
            token = response.json().get("access_token")
            self.token = token
            self.headers = {"Authorization": f"Bearer {self.token}"}
        except Exception as e:
            print(f"❌ Failed to decode token JSON: {e}")
            self.token = None
            self.headers = {}


    @task(2)
    def create_task(self):
        """Simulates creating a task"""
        response = self.client.post(
            url="/api/v1/items/",
            headers=self.headers,
            json={
                "title": "Task " + str(uuid.uuid4()),
                "description": "Generated by Locust",
                "due_date": datetime.utcnow().isoformat()
            },
            name="Create Task"
        )

        if response.status_code == 200:
            try:
                task_id = response.json().get("id")
                if task_id:
                    self.task_ids.append(task_id)
            except Exception:
                pass

        # ⬇️ For Cloud Function fallback testing (manually switch if needed)
        # self.client.post(
        #     url="https://us-central1-taskmanager-project-460020.cloudfunctions.net/notify_task_event",
        #     json={
        #         "task_id": str(uuid.uuid4()),
        #         "event": "created",
        #         "user_email": "kutluhan@example.com",
        #         "task_title": "Create API",
        #         "timestamp": datetime.utcnow().isoformat()
        #     },
        #     name="Create Task (Cloud Function)"
        # )
        
    @task(1)
    def update_task(self):
        """Simulates updating a task"""
        if not self.task_ids:
            return  # No task to update

        task_id = random.choice(self.task_ids)
        self.client.put(
            url=f"/api/v1/items/{task_id}",
            headers=self.headers,
            json={
                "title": "Updated Task",
                "description": "Updated by Locust"
            },
            name="Update Task"
        )

        # ⬇️ Cloud Function alternative for update
        # fake_task_id = uuid.uuid4()
        # self.client.post(
        #     url="https://us-central1-taskmanager-project-460020.cloudfunctions.net/notify_task_event",
        #     json={
        #         "task_id": str(fake_task_id),
        #         "event": "updated",
        #         "user_email": "kutluhan@example.com",
        #         "task_title": "Write tests",
        #         "timestamp": datetime.utcnow().isoformat()
        #     },
        #     name="Update Task (Cloud Function)"
        # )


    # ⬇️ Cloud Function endpoint for completing task
    # @task(1)
    # def complete_task(self):
    #     """Simulates completing a task"""
    #     self.client.post(
    #         # url="/tasks/complete",
    #         url="https://us-central1-taskmanager-project-460020.cloudfunctions.net/notify_task_event",
    #         json={
    #             "task_id": str(uuid.uuid4()),
    #             "event": "completed",
    #             "user_email": "kutluhan@example.com",
    #             "task_title": "Write tests",
    #             "timestamp": datetime.utcnow().isoformat()
    #         },
    #         name="Complete Task"
    #     )

    @task(1)
    def delete_task(self):
        """Simulates deleting a task"""
        if not self.task_ids:
            return  # No task to delete

        task_id = self.task_ids.pop()
        self.client.delete(
            url=f"/api/v1/items/{task_id}",
            headers=self.headers,
            name="Delete Task"
        )

        # ⬇️ Cloud Function alternative for delete
        # fake_task_id = uuid.uuid4()
        # self.client.post(
        #   url="https://us-central1-taskmanager-project-460020.cloudfunctions.net/notify_task_event",
        #     json={
        #         "task_id": str(fake_task_id),
        #         "event": "deleted",
        #         "user_email": "kutluhan@example.com",
        #         "task_title": "Old task",
        #         "timestamp": datetime.utcnow().isoformat()
        #     },
        #     name="Delete Task (Cloud Function)"
        # )
